#!/bin/bash

#SBATCH --job-name=mlip_tests
#SBATCH --partition=gputest
#SBATCH --account=plantto # !!it is mandatory to specify the account (project) as precised in the CSC rules!!
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=40
#SBATCH --mem-per-cpu=8GB
#SBATCH --time=0-00:15:00
#SBATCH --gres=gpu:v100:1
#SBATCH --output=mlp-r4-output_%j.txt
#SBATCH --error=mlp-r4-errors_%j.txt

#================================< Instructions-Section for Training MACE Potential >============================================
#--------------------------------------------------------------------------------------------------------------------------------

# Load necessary modules (!!checkh the availability of the following modules when using another machine!!)
# If certian modules are not available on your machine, contact the corrsponding admin(s) to install them.
module load pytorch/2.2 #necessary for 'mace_run_train'

# using a virtual environment (!!when using v-env all the packages and dependencies should be installed in that mace-venv!!) 
# python3 -m venv --system-site-packages mace-venv # should be used if there is no existent v-env
source /scratch/plantto/<user_name>/packages/mace_env/bin/activate

# Using the 'ulimit' command to control the user-level resource limits for processes. the option '-s unlimited' specifies that 
# there should be no limit on the stack size for the processes launched by the job. The stack size is the amount of memory 
# allocated for the call stack of a program.
ulimit -s unlimited

# Start of training the MACE architecture :

python /scratch/plantto/<user_name>/packages/mace/scripts/run_train.py \
    --train_file="./water_xe_dataset/mlip_data_xe-water_0-5ps_sampled-20.xyz" \
    --valid_fraction=0.05 \
    --test_file="./water_xe_dataset/water_xe_dataset_test.xyz" \
    --test_dir="./water_xe_dataset" \
    --name='MACE_model' \
    --model='MACE' \
    --num_interactions=1 \
    --num_channels=128 \
    --error_table='PerAtomRMSEstressvirials' \
    --max_L=1 \
    --correlation=3 \
    --E0s='average' \
    --r_max=4.0 \
    --radial_type='bessel' \
    --num_radial_basis=8 \
    --num_cutoff_basis=8 \
    --loss='universal' \
    --batch_size=1 \
    --num_workers=1 \
    --valid_batch_size=1 \
    --max_num_epochs=20 \
    --ema \
    --ema_decay=0.99 \
    --default_dtype='float32' \
    --device='cuda' \
    --seed=123456 \
    --restart_latest \
    --model_dir='model' \
    --checkpoints_dir='checkpoints' \
    --results_dir='results' \
    --log_dir='log' \
    --lr=0.005 \
    --swa \
    --start_swa=400 \
    --swa_energy_weight=1000 \
    --energy_weight=1.0 \
    --forces_weight=10 \
    --stress_weight=100 \
    --compute_stress=True \
    --compute_forces=True \
    --compute_avg_num_neighbors=True \
    --amsgrad \
    --scheduler='ReduceLROnPlateau' \
    --scheduler_patience=50 \
    --lr_scheduler_gamma=0.99 \
    --MLP_irreps='8x0e' \
    --radial_MLP='[32, 64, 128]' \
    --hidden_irreps='128x0e + 128x1o' \
    --num_channels=128 \
    --wandb \
    --wandb_project='MACE_MLIP' \
    --wandb_entity='<your-team-name>' \
    --wandb_name='run_test_0' \


cp checkpoints/*.model model

# Evaluate the obtained MACE model on an XYZ file

# Find the model file that matches the pattern
model_file=$(ls ./model/*.model | head -n 1)

# Check if any model files were found
if [ -z "$model_file" ]; then
  echo "No model files found in the directory ./model/"
  exit 1
fi

python /scratch/plantto/<user_name>/packages/mace/scripts/eval_configs.py \
    --configs="./water_xe_dataset/water_xe_dataset_test.xyz" \
    --model="$model_file" \
    --output="./test/water_xe_dataset_test_output.xyz" \

exit 0
